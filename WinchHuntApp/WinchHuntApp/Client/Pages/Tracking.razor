
@inject IJSRuntime jsRuntime
@inject IMapService mapService

@inject GeoLocationService locationService

@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation
@using WinchHuntApp.Client.Services
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps

@page "/tracking"

<div ref="mapDiv"
     id="mapDivId"
     style="        
        height: 90vh;
        top: 50px;
        bottom: 50px;
        left: 5%;
        right: 5%;
        background-color: yellow">

    <GoogleMap @ref="map" Id="map1" Options="@mapOptions" OnAfterInit="@OnAfterMapInit" Height="100%"></GoogleMap>

</div>

@code {

    private ElementReference mapDiv;
    private GoogleMap map;
    private MapOptions mapOptions;

    Marker currentLocationMarker;

    protected override async Task OnInitializedAsync()
    {
        InitMap();
        locationService.GeoLocationStateHasChanged += LocationUpdated;
    }


    private void LocationUpdated(object s, EventArgs e)
    {
        Console.WriteLine("SiteMap: Location Updated");
        var loc = locationService.CurrentPosition;
        Console.WriteLine($"Lat: {loc.Location.Coords.Latitude}, {loc.Location.Coords.Longitude} - Accuracy: {loc.Location.Coords.Accuracy}" );

        UpdateLocationMarker(loc.Location.Coords.Latitude, loc.Location.Coords.Longitude).Wait();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

    }

    protected override async Task OnParametersSetAsync()
    {

    }


    private void InitMap()
    {
        mapOptions = GetMapOptions();
    }

    private async Task OnAfterMapInit()
    {
        await locationService.GetGeolocation();

        var location = locationService.CurrentPosition;

        MapOptions options = GetMapOptions();
        options.Center = new LatLngLiteral(location.Location.Coords.Longitude, location.Location.Coords.Latitude);


        await UpdateLocationMarker(location.Location.Coords.Latitude, location.Location.Coords.Longitude);


    }


    private MapOptions GetMapOptions()
    {
        return new MapOptions()
        {
            Zoom = 12,
            Center = new LatLngLiteral()
            {
                Lat = 52.999641,
                Lng = 5.166507,
            },
            MapTypeId = MapTypeId.Sattellite,
            MapTypeControl = false,
            PanControl = false,
            RotateControl = false,
            ScaleControl = false,
            ZoomControl = false,
            StreetViewControl = false
        };
    }


    private async Task UpdateLocationMarker(double lat, double lon)
    {
        if (currentLocationMarker == null)
        {
            Console.WriteLine("Creating new marker");
            await CreateLocationMarker(lat, lon);
        }
        else
        {
            Console.WriteLine("Updating existing marker");
            await currentLocationMarker.SetPosition(new LatLngLiteral(lon, lat));
        }
    }


    private async Task CreateLocationMarker(double lat, double lon)
    {
        MarkerOptions options = new MarkerOptions()
        {
            Position = new LatLngLiteral(lon, lat),
            Map = map.InteropObject,
            Icon = new Icon()
            {
                Url = "/img/currentlocation.svg",
                Anchor = new Point()
                {
                    X = 10,
                    Y = 10
                },
                Size = new Size()
                {
                    Width = 40,
                    Height = 40
                },
                ScaledSize = new Size()
                {
                    Width = 20,
                    Height = 20
                }
            }
        };

        currentLocationMarker = await Marker.CreateAsync(map.JsRuntime, options);
    }



    //private async Task GeoLocationUpdated(GeolocationResult location)
    //{

    //    if (location.IsSuccess)
    //    {

    //        GeolocationCoordinate position = new GeolocationCoordinate(52.270088, 6.876613); //new GeolocationCoordinate(location.Coordinates.Latitude, location.Coordinates.Longitude);

    //        if (currentLocationMarker == null)
    //        {
    //            currentLocationMarker = CreateLocationMarker(position);
    //            googleMap.Markers.Add(currentLocationMarker);
    //        }
    //        else
    //        {
    //            currentLocationMarker.Position = position;
    //        }

    //        Console.WriteLine("GeoLocation result is true");
    //        Console.WriteLine($"Result: {location.ToString()}");
    //    }
    //}

    //private GoogleMapMarker CreateLocationMarker(GeolocationCoordinate position)
    //{

    //    GoogleMapMarker retVal = new GoogleMapMarker(position);

    //    retVal.Icon = new GoogleMapMarkerLabelIcon("/img/currentlocation.png")
    //    {
    //        Anchor = new Point()
    //        {
    //            X = 10,
    //            Y = 10
    //        },
    //        Size = new Rect()
    //        {
    //            Width = 40,
    //            Height = 40
    //        },
    //        ScaledSize = new Rect()
    //        {
    //            Width  = 20,
    //            Height = 20
    //        }
    //    };


    //    return retVal;
    //}



    //private async Task OnMapZoomLevelChanged()
    //{

    //}


}
