
@inject IJSRuntime JSRuntime
@inject IMapService mapService

@using Majorsoft.Blazor.Components.Maps

@using WinchHuntApp.Client.Services

@*Only if you want to use Google Maps*@
@using Majorsoft.Blazor.Components.Maps.Google

@*Other Maps dependencies*@
@using Majorsoft.Blazor.Components.Common.JsInterop.Geo
@using Majorsoft.Blazor.Components
@using Majorsoft.Blazor.Components.Core.Extensions
@*@using BrowserInterop.Extensions*@
@*@using BrowserInterop.Geolocation*@

@page "/sitemap"
    @*<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAYq9E0QENTISJ_dRolduQy9ywss-dmayM&callback=initMap&libraries=&v=weekly"></script>*@


    <h1>Display Google Map</h1>
    <div id="map" style="height:500px;width:100%;">
    </div>


    <div ref="mapDiv" style="
        top: 5%;
        bottom: 5%;
        left: 5%;
        right: 5%;
        background-color: yellow">

        Enter your name: <input @bind="name" />
        <button @onclick="Submit">Submit</button>


    </div>

    @code {

        string mapsScriptUrl = "https://maps.googleapis.com/maps/api/js?key=AIzaSyAYq9E0QENTISJ_dRolduQy9ywss-dmayM&callback=initMap&libraries=&v=weekly";

        private string name;

        // Load the module and keep a reference to it
        // You need to use .AsTask() to convert the ValueTask to Task as it may be awaited multiple times
        private Task<IJSObjectReference> _module;
        private Task<IJSObjectReference> MapsModule => _module ??= JSRuntime.InvokeAsync<IJSObjectReference>("import", mapsScriptUrl).AsTask();

        async Task Submit()
        {
            var module = await MapsModule;
            await module.InvokeVoidAsync("sayHi", name);
        }

        public async ValueTask DisposeAsync()
        {
            if (_module != null)
            {
                var module = await _module;
                await module.DisposeAsync();
            }
        }


        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            //base.OnAfterRenderAsync(firstRender);

            if (firstRender)
            {
                var module = await MapsModule;
                await JSRuntime.InvokeVoidAsync("initialize", null);
            }
        }



        protected override async Task OnInitializedAsync()
        {

            GeolocationService service = new GeolocationService(JSRuntime);
            await service.AddGeolocationWatcherAsync(GeoLocationUpdated, true);

        }


        private async Task GeoLocationUpdated(GeolocationResult location)
        {
            if (location.IsSuccess)
            {
                Console.WriteLine("GeoLocation result is true");
                Console.WriteLine($"Result: {location.ToString()}");

            }
        }

    }
